import random
from lib.es import es_comma, es_plus
from lib.plot import plot_func
import numpy as np


# the objective function is Rosenbrock!
def rosenbrock(v):
    """
      This function returns the Rosenbrock function result of a vector
    """
    total = 0
    for i in range(len(v) - 1):
        xi = v[i]
        xnext = v[i + 1]
        new = 100 * (xnext - xi ** 2) ** 2 + (xi - 1) ** 2
        total = total + new
    return total


def main(bounds, type='comma'):
    # seed the pseudorandom number generator
    # random.seed(101)
    # define the total iterations
    n_iter = 10000
    # number of parents selected
    mu = 20
    # initial population size (the number of children generated by parents)
    lam = 100

    # define the maximum step size
    sigma = 0.15

    # define the parent vector size
    n = 10

    # perform the evolution strategy (mu, lambda) search
    if (type == 'comma'):
        best, score = es_comma(rosenbrock, bounds, n_iter, step_size=sigma, n_selected_parents=mu, population_size=lam,
                               n_parent_size=n)
    else:
        best, score = es_plus(rosenbrock, bounds, n_iter, step_size=sigma, n_selected_parents=mu, population_size=lam,
                              n_parent_size=n)
    print('Done!')
    print('f(%s) = %f' % (best, score))


if __name__ == '__main__':
    # plot_func(objective, bound_range)
    main(bounds=[-30, 30], type='plus')
